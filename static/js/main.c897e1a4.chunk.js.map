{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","map","good","name","length","id","uuidv4","sort","good1","good2","localeCompare","reverse","getPreparedGoods","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"kPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SA+BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SAA0BC,EAAOL,EAAWE,GAC1C,IAAII,EAAgBD,EAAME,KAAI,SAAAC,GAAI,MAAK,CACrCC,KAAMD,EACNE,OAAQF,EAAKE,OACbC,GAAIC,kBAsBN,OAnBIZ,IACFM,EAAgBA,EAAcO,MAAK,SAACC,EAAOC,GACzC,OAAQf,GACN,KAAKJ,EACH,OAAOkB,EAAK,KAAkBE,cAAcD,EAAK,MAEnD,KAAKlB,EACH,OAAOiB,EAAK,OAAsBC,EAAK,OAEzC,QACE,OAAO,OAKXb,IACFI,EAAgBA,EAAcW,WAGzBX,EAMcY,CAAiBvB,EAAiBK,EAAWE,GAElE,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYrB,IAAcJ,IAE5B0B,QAAS,kBAAMrB,EAAaL,IAL9B,iCAUA,wBACEwB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYrB,IAAcH,IAE5ByB,QAAS,kBAAMrB,EAAaJ,IAL9B,4BAUA,wBACEuB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAanB,IAEfoB,QAAS,kBAAMnB,GAAeD,IALhC,sBAUEF,GAAaE,IACb,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPrB,EAAa,IACbE,GAAc,IALlB,sBAaJ,6BACGC,EAAaG,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,EAAKC,MAFDD,EAAKG,aCxGtBY,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c897e1a4.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, sortField, isReversed) {\n  let preparedGoods = goods.map(good => ({\n    name: good,\n    length: good.length,\n    id: uuidv4(),\n  }));\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return good1[SORT_FIELD_NAME].localeCompare(good2[SORT_FIELD_NAME]);\n\n        case SORT_FIELD_LENGTH:\n          return good1[SORT_FIELD_LENGTH] - good2[SORT_FIELD_LENGTH];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SORT_FIELD_NAME,\n          })}\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SORT_FIELD_LENGTH,\n          })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good.id}\n          >\n            {good.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}